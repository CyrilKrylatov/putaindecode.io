{"hasPreviousPage":true,"hasNextPage":true,"totalCount":132,"items":[{"slug":"es6-es2015-les-symboles","filename":"2015-12-17-es6-es2015-les-symboles","title":"ES6, ES2015 : les symboles","date":"Thu, 17 Dec 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-12-17T00:00:00.000Z","title":"ES6, ES2015 : les symboles","author":"divarvel","oldSlug":"js/es2015/symbols","slug":"es6-es2015-les-symboles"},"summary":"<p>Dans sa politique d'enrichissement des types primitifs, ES6 introduit les\nsymboles. Chers aux développeurs de nombreux langages, Ruby en tête, les\nsymboles constituent une étape de plus vers l'éradication du <em>stringly-typed\nprogramming</em>. En effet, le</p>\n"},{"slug":"es6-es2015-la-boucle-for-of","filename":"2015-12-16-es6-es2015-la-boucle-for-of","title":"ES6, ES2015 : la boucle for..of","date":"Wed, 16 Dec 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-12-16T00:00:00.000Z","title":"ES6, ES2015 : la boucle for..of","author":"Freezystem","oldSlug":"js/es2015/for-of","slug":"es6-es2015-la-boucle-for-of"},"summary":"<h2>Introduction</h2>\n<p>Avec l'arrivée de nouveaux objets itérables, ECMAScript avait la nécessité de\ns'enrichir de nouvelles façons de parcourir ces derniers. Dans l'unique souci de\nmaintenir la rétro-compatibilité avec l'existant, l'ES6 se devait de garde</p>\n"},{"slug":"es6-es2015-les-fonctions-flechees","filename":"2015-12-15-es6-es2015-les-fonctions-flechees","title":"ES6, ES2015 : les fonctions fléchées","date":"Tue, 15 Dec 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-12-15T00:00:00.000Z","title":"ES6, ES2015 : les fonctions fléchées","author":"MoOx","oldSlug":"js/es2015/arrow-functions","slug":"es6-es2015-les-fonctions-flechees"},"summary":"<p>ES2015 nous apporte encore du sucre syntaxique qui risque très probablement de\nvous faire oublier <code>Function.prototype.bind()</code>.</p>\n<p>Les fonctions fléchées offrent une syntaxe raccourcie des fonctions en utilisant\nla syntaxe <code>=&gt;</code>.</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// es5</span>\n<span class=\"hljs-keyword\">var</span> myFn =</code></pre>\n"},{"slug":"es2016-fonctions-asynchrones-async-await","filename":"2015-12-14-es2016-fonctions-asynchrones-async-await","title":"ES2016 (?): fonctions asynchrones (async/await)","date":"Mon, 14 Dec 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-12-14T00:00:00.000Z","title":"ES2016 (?): fonctions asynchrones (async/await)","author":"naholyr","oldSlug":"js/es2016/async-await","slug":"es2016-fonctions-asynchrones-async-await"},"summary":"<p>Aujourd'hui, une fonctionnalité peut-être abusivement taggée &quot;ES6&quot; puisqu'elle\nne fait pas partie des propositions acceptées cette année : les fonctions\nasynchrones (async/await). La\n<a href=\"https://tc39.github.io/ecmascript-asyncawait/\">spécification</a> est</p>\n"},{"slug":"es6-es2015-les-nouvelles-methodes-d-array","filename":"2015-12-13-es6-es2015-les-nouvelles-methodes-d-array","title":"ES6, ES2015 : les nouvelles méthodes d'Array","date":"Sun, 13 Dec 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-12-13T00:00:00.000Z","title":"ES6, ES2015 : les nouvelles méthodes d'Array","author":"lionelB","oldSlug":"js/es2015/array-methods-addition/","slug":"es6-es2015-les-nouvelles-methodes-d-array"},"summary":"<p><del>ES6</del> ES2015 enrichit les objets de la bibiliothèque standard de nouvelles\nfonctionnalités. Voici les nouveautés que l'on va trouver dans <code>Array</code>.</p>\n<h2>Array.from()</h2>\n<p>Parmi les nouvelles méthodes ajoutées à Array, <code>Array.from()</code> est peut-être\ncelle q</p>\n"},{"slug":"es6-es2015-parametres-rest-et-operateur-spread","filename":"2015-12-12-es6-es2015-parametres-rest-et-operateur-spread","title":"ES6, ES2015 : paramètres rest et opérateur spread","date":"Sat, 12 Dec 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-12-12T00:00:00.000Z","title":"ES6, ES2015 : paramètres rest et opérateur spread","author":"zoontek","oldSlug":"js/es2015/rest-spread","slug":"es6-es2015-parametres-rest-et-operateur-spread"},"summary":"<p>Identiques en apparence et en syntaxe, ils permettent d'effectuer plus\nsimplement des opérations complexes sur les tableaux, ou tout autre objet\nitérable.</p>\n<h2>Les paramètres rest</h2>\n<p>Avez-vous déjà eu l'occasion d'utiliser l'horrible variable magique `a</p>\n"},{"slug":"es6-es2015-les-maps-weakmaps","filename":"2015-12-11-es6-es2015-les-maps-weakmaps","title":"ES6, ES2015 : les Maps & WeakMaps","date":"Fri, 11 Dec 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-12-11T00:00:00.000Z","title":"ES6, ES2015 : les Maps & WeakMaps","author":"bloodyowl","oldSlug":"js/es2015/maps-weakmaps","slug":"es6-es2015-les-maps-weakmaps"},"summary":"<h2>Maps</h2>\n<p>Comme les objets, les maps et weak maps introduites avec ES6 sont des\ndictionnaires. La différence avec un objet, c'est que n'importe quelle valeur\npeut être utilisée comme clé.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> myMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();\nmyMap.set(<span class=\"hljs-built_in\">window</span>, <span class=\"hljs-number\">1</span>);\nm</code></pre>\n"}]}